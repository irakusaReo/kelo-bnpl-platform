openapi: 3.0.0
info:
  title: Kelo BNPL Platform API
  description: API for the Kelo Buy Now, Pay Later platform - A Web3-powered BNPL solution for the Kenyan market
  version: 1.0.0
  contact:
    name: Kelo Team
    email: api@kelo.ke
    url: https://kelo.ke
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.kelo.ke/v1
    description: Production server
  - url: https://staging-api.kelo.ke/v1
    description: Staging server
  - url: http://localhost:8080/v1
    description: Local development server

paths:
  # Health Check
  /health:
    get:
      summary: Health Check
      description: Check the health status of the API
      tags:
        - System
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: 1.0.0

  # Authentication
  /auth/login:
    post:
      summary: User Login
      description: Authenticate a user and return JWT tokens
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@kelo.ke
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: JWT access token
                  refresh_token:
                    type: string
                    description: JWT refresh token
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /auth/register:
    post:
      summary: User Registration
      description: Register a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - first_name
                - last_name
              properties:
                email:
                  type: string
                  format: email
                  example: user@kelo.ke
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: password123
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                phone:
                  type: string
                  example: +254712345678
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    $ref: '#/components/schemas/User'
        '409':
          $ref: '#/components/responses/ConflictError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /auth/refresh:
    post:
      summary: Refresh Token
      description: Refresh JWT access token using refresh token
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: JWT refresh token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: New JWT access token
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Users
  /users/profile:
    get:
      summary: Get User Profile
      description: Get the current user's profile information
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      summary: Update User Profile
      description: Update the current user's profile information
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                phone:
                  type: string
                  example: +254712345678
                did:
                  type: string
                  description: Decentralized Identifier
                  example: did:hedera:testnet:ELq2eN_7...
                wallet_address:
                  type: string
                  description: Blockchain wallet address
                  example: 0x1234567890123456789012345678901234567890
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /users/credit-score:
    get:
      summary: Get User Credit Score
      description: Get the current user's credit score and related information
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Credit score retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  score:
                    type: integer
                    example: 750
                  previous_score:
                    type: integer
                    example: 700
                  max_score:
                    type: integer
                    example: 850
                  rating:
                    type: string
                    example: Excellent
                  factors:
                    type: object
                    description: Scoring factors breakdown
                  valid_until:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Loans
  /loans:
    get:
      summary: List User Loans
      description: Get a list of loans for the current user
      tags:
        - Loans
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter loans by status
          schema:
            type: string
            enum: [pending, approved, active, repaid, defaulted]
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Loans retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  loans:
                    type: array
                    items:
                      $ref: '#/components/schemas/Loan'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Apply for Loan
      description: Submit a new loan application
      tags:
        - Loans
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - duration
                - merchant_id
                - purpose
              properties:
                amount:
                  type: number
                  format: decimal
                  description: Loan amount in KES
                  example: 50000
                duration:
                  type: integer
                  description: Loan duration in days
                  example: 30
                merchant_id:
                  type: string
                  format: uuid
                  description: Merchant ID
                  example: 123e4567-e89b-12d3-a456-426614174000
                purpose:
                  type: string
                  description: Purpose of the loan
                  example: Business inventory purchase
      responses:
        '201':
          description: Loan application submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /loans/{id}:
    get:
      summary: Get Loan Details
      description: Get detailed information about a specific loan
      tags:
        - Loans
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Loan ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Loan details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Loan'
                  - type: object
                    properties:
                      repayments:
                        type: array
                        items:
                          $ref: '#/components/schemas/Repayment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /loans/{id}/repay:
    post:
      summary: Make Loan Repayment
      description: Make a repayment for a specific loan
      tags:
        - Loans
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Loan ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - payment_method
              properties:
                amount:
                  type: number
                  format: decimal
                  description: Repayment amount in KES
                  example: 10000
                payment_method:
                  type: string
                  enum: [mpesa, bank_transfer, crypto]
                  example: mpesa
                reference_number:
                  type: string
                  description: Payment reference number
                  example: ABC123XYZ
      responses:
        '200':
          description: Repayment submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repayment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Merchants
  /merchants/register:
    post:
      summary: Register as Merchant
      description: Register a new merchant account
      tags:
        - Merchants
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - business_name
                - business_type
                - phone
                - email
              properties:
                business_name:
                  type: string
                  example: Kela Electronics
                business_type:
                  type: string
                  enum: [retail, restaurant, service, ecommerce, other]
                  example: retail
                description:
                  type: string
                  example: Electronics and mobile phone retailer
                website:
                  type: string
                  format: uri
                  example: https://kelaelectronics.co.ke
                address:
                  type: string
                  example: 123 Moi Avenue, Nairobi
                city:
                  type: string
                  example: Nairobi
                country:
                  type: string
                  example: Kenya
                postal_code:
                  type: string
                  example: 00100
                phone:
                  type: string
                  example: +254712345678
                email:
                  type: string
                  format: email
                  example: contact@kelaelectronics.co.ke
      responses:
        '201':
          description: Merchant registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /merchants/profile:
    get:
      summary: Get Merchant Profile
      description: Get the current user's merchant profile
      tags:
        - Merchants
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Merchant profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /merchants/loans:
    get:
      summary: List Merchant Loans
      description: Get a list of loans for the current merchant
      tags:
        - Merchants
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter loans by status
          schema:
            type: string
            enum: [pending, approved, active, repaid, defaulted]
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Merchant loans retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  loans:
                    type: array
                    items:
                      $ref: '#/components/schemas/Loan'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Merchant Stores
  /stores:
    get:
      summary: List all merchant stores
      description: Get a list of all merchant stores available on the platform.
      tags:
        - Merchant Stores
      responses:
        '200':
          description: Stores retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MerchantStore'
    post:
      summary: Create a new merchant store
      description: Allows a merchant to create a new store.
      tags:
        - Merchant Stores
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantStore'
      responses:
        '201':
          description: Store created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantStore'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /stores/{id}:
    get:
      summary: Get merchant store details
      description: Get detailed information about a specific merchant store.
      tags:
        - Merchant Stores
      parameters:
        - name: id
          in: path
          required: true
          description: Store ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Store details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantStore'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update a merchant store
      description: Allows a merchant to update their store's details.
      tags:
        - Merchant Stores
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Store ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantStore'
      responses:
        '200':
          description: Store updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantStore'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /stores/{store_id}/products:
    get:
      summary: List products by store
      description: Get a list of all products for a specific merchant store.
      tags:
        - Products
      parameters:
        - name: store_id
          in: path
          required: true
          description: Store ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Products
  /products:
    post:
      summary: Create a new product
      description: Allows a merchant to create a new product for their store.
      tags:
        - Products
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /products/{id}:
    get:
      summary: Get product details
      description: Get detailed information about a specific product.
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update a product
      description: Allows a merchant to update their product's details.
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '400':
          $ref: '#/components/responses/BadRequestError'
    delete:
      summary: Delete a product
      description: Allows a merchant to delete a product.
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Orders
  /orders:
    get:
      summary: List user orders
      description: Get a list of orders for the current user.
      tags:
        - Orders
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a new order
      description: Create a new order from a list of products.
      tags:
        - Orders
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /orders/{id}:
    get:
      summary: Get order details
      description: Get detailed information about a specific order.
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Liquidity Pools
  /pools:
    get:
      summary: List Liquidity Pools
      description: Get a list of all available liquidity pools
      tags:
        - Liquidity Pools
      security:
        - BearerAuth: []
      parameters:
        - name: chain_id
          in: query
          description: Filter by blockchain chain ID
          schema:
            type: string
        - name: token_symbol
          in: query
          description: Filter by token symbol
          schema:
            type: string
      responses:
        '200':
          description: Liquidity pools retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  pools:
                    type: array
                    items:
                      $ref: '#/components/schemas/LiquidityPool'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /pools/deposit:
    post:
      summary: Deposit Liquidity
      description: Deposit funds into a liquidity pool
      tags:
        - Liquidity Pools
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pool_id
                - amount
              properties:
                pool_id:
                  type: string
                  format: uuid
                  description: Liquidity pool ID
                  example: 123e4567-e89b-12d3-a456-426614174000
                amount:
                  type: number
                  format: decimal
                  description: Amount to deposit
                  example: 10000
      responses:
        '200':
          description: Deposit successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Deposit successful
                  transaction:
                    $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /pools/withdraw:
    post:
      summary: Withdraw Liquidity
      description: Withdraw funds from a liquidity pool
      tags:
        - Liquidity Pools
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pool_id
                - amount
              properties:
                pool_id:
                  type: string
                  format: uuid
                  description: Liquidity pool ID
                  example: 123e4567-e89b-12d3-a456-426614174000
                amount:
                  type: number
                  format: decimal
                  description: Amount to withdraw
                  example: 5000
      responses:
        '200':
          description: Withdrawal successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Withdrawal successful
                  transaction:
                    $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  # Statistics
  /statistics/dashboard:
    get:
      summary: Dashboard Statistics
      description: Get dashboard statistics for the current user
      tags:
        - Statistics
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_loans:
                    type: integer
                    example: 5
                  active_loans:
                    type: integer
                    example: 2
                  total_repaid:
                    type: number
                    format: decimal
                    example: 150000
                  credit_score:
                    type: integer
                    example: 750
                  liquidity_provided:
                    type: number
                    format: decimal
                    example: 50000
                  interest_earned:
                    type: number
                    format: decimal
                    example: 2500
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: user@kelo.ke
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        phone:
          type: string
          example: +254712345678
        did:
          type: string
          description: Decentralized Identifier
          example: did:hedera:testnet:ELq2eN_7...
        wallet_address:
          type: string
          description: Blockchain wallet address
          example: 0x1234567890123456789012345678901234567890
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Merchant:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        user_id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        business_name:
          type: string
          example: Kela Electronics
        business_type:
          type: string
          enum: [retail, restaurant, service, ecommerce, other]
          example: retail
        description:
          type: string
          example: Electronics and mobile phone retailer
        website:
          type: string
          format: uri
          example: https://kelaelectronics.co.ke
        address:
          type: string
          example: 123 Moi Avenue, Nairobi
        city:
          type: string
          example: Nairobi
        country:
          type: string
          example: Kenya
        postal_code:
          type: string
          example: 00100
        phone:
          type: string
          example: +254712345678
        email:
          type: string
          format: email
          example: contact@kelaelectronics.co.ke
        did:
          type: string
          description: Merchant DID
          example: did:hedera:testnet:ELq2eN_8...
        wallet_address:
          type: string
          description: Merchant wallet address
          example: 0x1234567890123456789012345678901234567890
        is_verified:
          type: boolean
          example: true
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    MerchantStore:
      type: object
      properties:
        id:
          type: string
          format: uuid
        merchant_id:
          type: string
          format: uuid
        store_name:
          type: string
        store_url:
          type: string
          format: uri
        store_address:
          type: string
        logo_url:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        merchant_store_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        sku:
          type: string
        images:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        merchant_store_id:
          type: string
          format: uuid
        total_amount:
          type: number
          format: float
        status:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        order_id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        quantity:
          type: integer
        price_at_purchase:
          type: number
          format: float

    Loan:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        user_id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        merchant_id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        amount:
          type: number
          format: decimal
          example: 50000
        interest_rate:
          type: number
          format: decimal
          example: 5.5
        duration:
          type: integer
          example: 30
        status:
          type: string
          enum: [pending, approved, active, repaid, defaulted]
          example: active
        purpose:
          type: string
          example: Business inventory purchase
        token_id:
          type: string
          description: NFT token ID on Hedera
          example: 12345
        chain_id:
          type: string
          example: hedera-testnet
        transaction_hash:
          type: string
          example: 0x1234567890123456789012345678901234567890
        due_date:
          type: string
          format: date-time
        approved_at:
          type: string
          format: date-time
        disbursed_at:
          type: string
          format: date-time
        repaid_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Repayment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        loan_id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        amount:
          type: number
          format: decimal
          example: 10000
        transaction_hash:
          type: string
          example: 0x1234567890123456789012345678901234567890
        chain_id:
          type: string
          example: ethereum
        status:
          type: string
          enum: [pending, completed, failed]
          example: completed
        payment_method:
          type: string
          enum: [mpesa, bank_transfer, crypto]
          example: mpesa
        reference_number:
          type: string
          example: ABC123XYZ
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    LiquidityPool:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        token_address:
          type: string
          example: 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
        token_symbol:
          type: string
          example: USDC
        chain_id:
          type: string
          example: ethereum
        total_liquidity:
          type: number
          format: decimal
          example: 1000000
        total_deposits:
          type: number
          format: decimal
          example: 1200000
        total_withdrawals:
          type: number
          format: decimal
          example: 200000
        total_interest_paid:
          type: number
          format: decimal
          example: 5000
        interest_rate:
          type: number
          format: decimal
          example: 5.0
        is_active:
          type: boolean
          example: true
        contract_address:
          type: string
          example: 0x1234567890123456789012345678901234567890
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        user_id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        type:
          type: string
          enum: [deposit, withdrawal, disbursement, repayment]
          example: deposit
        amount:
          type: number
          format: decimal
          example: 10000
        token_address:
          type: string
          example: 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
        token_symbol:
          type: string
          example: USDC
        chain_id:
          type: string
          example: ethereum
        transaction_hash:
          type: string
          example: 0x1234567890123456789012345678901234567890
        block_number:
          type: integer
          example: 12345678
        status:
          type: string
          enum: [pending, confirmed, failed]
          example: confirmed
        gas_used:
          type: integer
          example: 21000
        gas_price:
          type: number
          format: decimal
          example: 0.00000002
        fee:
          type: number
          format: decimal
          example: 0.00042
        metadata:
          type: object
          description: Additional transaction metadata
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        pages:
          type: integer
          example: 5

    Error:
      type: object
      properties:
        error:
          type: string
          example: Bad request
        message:
          type: string
          example: Invalid request parameters
        code:
          type: integer
          example: 400
        details:
          type: object
          description: Additional error details

  responses:
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ConflictError:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: System
    description: System endpoints
  - name: Authentication
    description: User authentication endpoints
  - name: Users
    description: User management endpoints
  - name: Loans
    description: Loan management endpoints
  - name: Merchants
    description: Merchant management endpoints
  - name: Merchant Stores
    description: Endpoints for managing merchant stores
  - name: Products
    description: Endpoints for managing products
  - name: Orders
    description: Endpoints for managing orders
  - name: Liquidity Pools
    description: Liquidity pool management endpoints
  - name: Statistics
    description: Statistics and analytics endpoints